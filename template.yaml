AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    "Wearable Health Monitoring Solution (WHMP) \n"

Globals:
  Function:
    AutoPublishAlias: live
    Handler: index.handler
    MemorySize: 256
    Runtime: nodejs12.x
    Timeout: 120
    Tracing: Active
    Layers:
      - !Ref CoreLayer

Parameters: 
    DataTable:
      Type: String
    UserTable:
      Type: String
    DeviceTable:
      Type: String

Resources:

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: DeleteRecordsAfter2Days
            ExpirationInDays: 2
            Status: Enabled
            Prefix: "data"

  BucketParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /whmp/bucket
      Type: String
      Value: !Ref Bucket
      Description: Bucket Name

  CoreLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
        Description: WHMP layers
        ContentUri: ./layers/layer.zip
        CompatibleRuntimes:
          - nodejs12.x
          - nodejs10.x
        RetentionPolicy: Delete

  AnomalyDetectionHelper:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/anomaly_detection_helper/
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName:
              !Ref Bucket 
        - DynamoDBCrudPolicy:
            TableName:
              !Ref DataTable
        - DynamoDBCrudPolicy:
            TableName:
              !Ref UserTable
        - DynamoDBCrudPolicy:
            TableName:
              !Ref DeviceTable
        - SSMParameterReadPolicy:
            ParameterName: "whmp*"
      Environment:
        Variables:
          DataTable: !Ref DataTable
          UserTable: !Ref UserTable
          DeviceTable: !Ref DeviceTable

  DataRecordProcessing:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/data_record_processing/
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName:
              !Ref Bucket 
        - FirehoseCrudPolicy:
            DeliveryStreamName: 
              !Ref DeliveryStream 
        - DynamoDBCrudPolicy:
            TableName:
              !Ref DataTable
        - DynamoDBCrudPolicy:
            TableName:
              !Ref UserTable
        - DynamoDBCrudPolicy:
            TableName:
              !Ref DeviceTable
        - SSMParameterReadPolicy:
            ParameterName: "whmp*"
      Environment:
        Variables:
          DataTable: !Ref DataTable
          UserTable: !Ref UserTable
          DeviceTable: !Ref DeviceTable

  DeviceStatusRefresh:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/device_status_refresh/
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName:
              !Ref Bucket 
        - DynamoDBCrudPolicy:
            TableName:
              !Ref DataTable
        - DynamoDBCrudPolicy:
            TableName:
              !Ref UserTable
        - DynamoDBCrudPolicy:
            TableName:
              !Ref DeviceTable
        - SSMParameterReadPolicy:
            ParameterName: "whmp*"
      Environment:
        Variables:
          DataTable: !Ref DataTable
          UserTable: !Ref UserTable
          DeviceTable: !Ref DeviceTable


  IoTPolicy:
        Type: "AWS::IoT::Policy"
        Properties:
            PolicyDocument: |
                {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": "iot:Connect",
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "iot:Publish",
                        "iot:Subscribe",
                        "iot:Receive"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
                
    CognitoIdentityPool:
        Type: "AWS::Cognito::IdentityPool"
        Properties:
            AllowUnauthenticatedIdentities: true

    CognitoUnAuthorizedRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Principal: 
                    Federated: "cognito-identity.amazonaws.com"
                  Action: 
                    - "sts:AssumeRoleWithWebIdentity"
                  Condition:
                    StringEquals: 
                        "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool
                    "ForAnyValue:StringLike":
                        "cognito-identity.amazonaws.com:amr": unauthenticated
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/AWSIoTFullAccess"
            Policies:
                - PolicyName: "CognitoUnauthorizedPolicy"
                  PolicyDocument: 
                    Version: "2012-10-17"
                    Statement: 
                        - Effect: "Allow"
                          Action:
                            - "mobileanalytics:PutEvents"
                            - "cognito-sync:*"
                          Resource: "*"                            
              
    IdentityPoolRoleMapping:
        Type: "AWS::Cognito::IdentityPoolRoleAttachment"
        Properties:
            IdentityPoolId: !Ref CognitoIdentityPool
            Roles:
                #authenticated: !GetAtt CognitoAuthorizedRole.Arn
                unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

    MyTopicRule:
        Type: 'AWS::IoT::TopicRule'
        Properties:
            TopicRulePayload:
                RuleDisabled: 'false'
                Sql: !Sub 'SELECT * FROM "${AWS::StackName}" WHERE heart_rate > 50'
                Actions:
                    - Kinesis:
                        RoleArn: !Sub '${IoTTopicRuleRole.Arn}'
                        StreamName: !Ref DeliveryStream
                        PartitionKey: 1
                AwsIotSqlVersion: 2016-03-23
                
    IoTTopicRuleRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Principal:
                  Service:
                  - iot.amazonaws.com
                Action:
                - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: 'IoTTopicRulePolicy'
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          Effect: Allow
                          Action:
                              - kinesis:PutRecord
                          Resource: !GetAtt DeliveryStream.Arn

#
#
#

  DeliveryStreamParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /whmp/deliverystream
      Type: String
      Value: !Ref DeliveryStream
      Description: Kinesis Firehose Name

  DeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
      - DeliveryStreamPolicy
    Properties:
      ExtendedS3DestinationConfiguration:
        Prefix: data/parquet-!{timestamp:yyyy}/
        ErrorOutputPrefix: FirehoseFailures/!{firehose:error-output-type}/!{firehose:random-string}/
        BucketARN: !Sub arn:aws:s3:::${Bucket}
        RoleARN: !GetAtt DeliveryStreamRole.Arn
        DataFormatConversionConfiguration:
          Enabled: true
          InputFormatConfiguration:
            Deserializer: 
              OpenXJsonSerDe: {}
          OutputFormatConfiguration: 
            Serializer:
              ParquetSerDe: {}
          SchemaConfiguration:
              Region: !Sub ${AWS::Region}
              RoleARN: !GetAtt DeliveryStreamRole.Arn
              DatabaseName: !Ref AthDatabase
              TableName: !Ref AthTable

  DeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'

  DeliveryStreamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref DeliveryStreamRole
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Sub 'arn:aws:s3:::${Bucket}'
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref Bucket
                  - '/*'
          - Effect: Allow
            Action:
              - 'glue:Start*'
              - 'glue:Stop*'
              - 'glue:Create*'
              - 'glue:Get*'
              - 'glue:List*'
              - 'glue:Search*'
            Resource: '*'

Outputs:
  Bucket:
      Value: !Ref Bucket
